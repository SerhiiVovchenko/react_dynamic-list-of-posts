{"version":3,"sources":["types/ErrorType.ts","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorTypesForm.ts","components/NewCommentForm.tsx","helper/helper.ts","components/CommentList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ErrorType","PostsList","posts","selectPost","openerDetails","closeCommentList","isCommentListHiden","length","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorForm","client","customFetch","userId","postId","newComment","idComment","NewCommentForm","setComments","setErrorType","useState","name","setName","email","setEmail","message","setMessage","hasName","setHasName","hasEmail","setHasEmail","isEmailValid","setIsEmailValid","hasComment","setHasComment","isCommentAdd","setIsCommentAdd","addNewComment","useCallback","a","fetchComment","prevComments","ADD","handleFormSubmit","ev","isNotValid","preventDefault","String","toLowerCase","match","onSubmit","htmlFor","placeholder","classNames","value","onChange","event","currentTarget","NAME","NOTVALID","EMAIL","COMMENT","CommentsList","comments","setComment","handleDeleteComment","commentId","filter","DELETE","comment","href","PostDetails","errorType","isFetch","isCommentFormOpen","openFormForComment","errorTypes","COMMENTS","includes","UserSelector","users","select","onSelect","getUserPosts","setIsCommentListHidden","isVisible","setIsVisible","selectRef","useRef","handleClick","target","current","useEffect","document","addEventListener","removeEventListener","ref","role","user","handleSelectUser","App","setUsers","isErrorType","setPosts","isPostListVisible","setIsPostListVisible","isLoaderVisible","setIsLoaderVisible","isCommentFetch","setIsCommentFetch","isCommentListHidden","selectedPost","setSelectedPost","isOpenFormForComment","setOpenFormForComment","selectedUser","setSelectedUser","loadingErrors","USERS","POSTS","getUsers","fetchUsers","getUserPostsFromServer","fetchPost","getCommentByPostFromServer","fetchComments","ReactDOM","render","getElementById"],"mappings":"sMAAYA,E,gGCWCC,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,mBAEA,OAAKJ,EAAMK,OAYT,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGN,EAAMO,KAAI,SAAAC,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,qBAAIJ,UAAU,8BAAd,UACGF,GACC,wBACEO,KAAK,SACL,UAAQ,aACRL,UAAU,0BACVM,QAAS,kBAAMV,EAAcM,IAJ/B,mBAUAJ,IACAI,EAAKC,MAAL,OAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAYQ,IAEpB,wBACEE,KAAK,SACL,UAAQ,aACRL,UAAU,0BACVM,QAAS,kBAAMT,GAAiB,IAJlC,mBASA,wBACEQ,KAAK,SACL,UAAQ,aACRL,UAAU,SACVM,QAAS,kBAAMV,EAAcM,IAJ/B,wBA/BcA,EAAKC,eAxBnC,qBACEH,UAAU,0BACV,UAAQ,aAFV,2BClBOO,G,MAAS,kBACpB,qBAAKP,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,kBFJPR,K,2CAAAA,E,4CAAAA,E,4CAAAA,E,iDAAAA,E,mDAAAA,M,KGUZ,IAAMgB,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IC3CKC,ED2CCC,EACN,SAAIb,GAAJ,OAAoBD,EAAWC,IADzBa,EAEL,SAAIb,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDW,EAIH,SAACb,GAAD,OAAiBD,EAAQC,EAAK,WAG3Bc,EACQ,kBAAMD,EAAW,WADzBC,EAEQ,SAACC,GAAD,OAAoBF,EAAA,wBAAoCE,KAFhED,EAGM,SAACE,GAAD,OAAoBH,EAAA,2BAA0CG,KAHpEF,EAIC,SAACG,GAAD,OACVJ,EAAqB,YAAaI,IALzBH,EAMI,SAACI,GAAD,OAAuBL,EAAA,oBAA2BK,M,SCxDvDN,K,wBAAAA,E,0BAAAA,E,0BAAAA,E,iCAAAA,M,KCeL,IAAMO,EAAkC,SAAC,GAIzC,IAHLhC,EAGI,EAHJA,KACAiC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACA,EAAoCZ,oBAAS,GAA7C,mBAAOa,EAAP,KAAmBC,EAAnB,KACA,EAAwCd,oBAAS,GAAjD,mBAAOe,EAAP,KAAqBC,EAArB,KAEMC,EAAgBC,sBAAW,sBAAC,8BAAAC,EAAA,6DAChCH,GAAgB,GADgB,SAIxBrB,EAAa,CACjBD,OAAM,OAAE7B,QAAF,IAAEA,OAAF,EAAEA,EAAMC,GACdmC,OACAE,QACArB,KAAMuB,GARsB,SAWHb,EAAuBG,GAXpB,OAWxByB,EAXwB,OAa9Bd,EAAW,IACXR,GAAY,SAAAuB,GAAY,4BAAQA,GAAR,CAAsBD,OAdhB,kDAgB9BrB,EAAa5C,EAAUmE,KAhBO,yBAkB9BN,GAAgB,GAChBR,GAAW,GACXE,GAAY,GACZI,GAAc,GArBgB,6EAuB/B,CAACb,EAAME,EAAOE,IAEXkB,EAAmB,SAACC,GAGxB,IAAIC,EAFJD,EAAGE,iBAIEzB,IACHO,GAAW,GACXiB,GAAa,GAGVtB,IACHO,GAAY,GACZe,GAAa,GCjEVE,ODoEaxB,GCnEjByB,cACAC,MAEC,2JDiEAjB,GAAgB,GAChBa,GAAa,GAGVpB,IACHS,GAAc,GACdW,GAAa,GAGXA,GAIJR,KA6BF,OACE,uBAAM,UAAQ,iBAAiBa,SAAUP,EAAzC,UACE,sBAAK5D,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoE,QAAQ,sBAAjC,yBAIA,sBAAKpE,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLiC,KAAK,OACLnC,GAAG,sBACHkE,YAAY,eACZrE,UAAWsE,IAAW,QAAS,CAC7B,aAAc1B,IAEhB2B,MAAOjC,EACPkC,SAjCe,SAACC,GACxBlC,EAAQkC,EAAMC,cAAcH,OAC5B1B,GAAW,MAkCL,sBAAM7C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,mBAGb4C,GACA,sBACE5C,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,sCAKjB4C,GACA,mBAAG5C,UAAU,iBAAiB,UAAQ,eAAtC,SACG2B,EAAUgD,UAMjB,sBAAK3E,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQoE,QAAQ,uBAAjC,0BAIA,sBAAKpE,UAAU,yCAAf,UACE,uBACEK,KAAK,QACLiC,KAAK,QACLnC,GAAG,uBACHkE,YAAY,iBACZrE,UAAWsE,IAAW,QAAS,CAC7B,aAAcxB,IAEhByB,MAAO/B,EACPgC,SApEgB,SAACC,GACzBhC,EAASgC,EAAMC,cAAcH,OAC7BxB,GAAY,GACZE,GAAgB,MAoEV,sBAAMjD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,wBAGZ8C,IAAaE,IACd,sBACEhD,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,uCAKhB8C,IAAaE,IACd,mBAAGhD,UAAU,iBAAiB,UAAQ,eAAtC,SACI8C,EAA6BnB,EAAUiD,SAA5BjD,EAAUkD,WAK7B,sBAAK7E,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoE,QAAQ,eAAjC,0BAIA,qBAAKpE,UAAU,UAAf,SACE,0BACEG,GAAG,eACHmC,KAAK,OACL+B,YAAY,oBACZrE,UAAWsE,IAAW,WAAY,CAChC,aAAcpB,IAEhBqB,MAAO7B,EACP8B,SApGkB,SAACC,GAC3B9B,EAAW8B,EAAMC,cAAcH,OAC/BpB,GAAc,SAsGRD,GACA,mBAAGlD,UAAU,iBAAiB,UAAQ,eAAtC,SACG2B,EAAUmD,aAKjB,sBAAK9E,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWsE,IAAW,SAAU,UAAW,CACzC,aAAclB,IAEhB9C,QAASsD,EALX,mBAWF,qBAAK5D,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAU,0BACVM,QArJc,WACtBiC,EAAQ,IACRE,EAAS,IACTE,EAAW,IACXE,GAAW,GACXE,GAAY,GACZI,GAAc,GACdF,GAAgB,IA2IV,4BE7NG8B,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACA7C,EACI,EADJA,aAEM8C,EAAmB,uCAAG,WAAOC,GAAP,SAAA3B,EAAA,sEAExByB,GAAW,SAAAvB,GAAY,OAAIA,EACxB0B,QAAO,qBAAGjF,KAAgBgF,QAHL,SAIlBtD,EAA0BsD,GAJR,sDAMxB/C,EAAa5C,EAAU6F,QANC,wDAAH,sDAUzB,OAAKL,EAASjF,OASZ,qCACE,mBAAGC,UAAU,aAAb,uBACCgF,EAAS/E,KAAI,SAAAqF,GAAO,OACnB,0BAEEtF,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGuF,KAAI,iBAAYD,EAAQ9C,OAAS,UAAQ,gBAA5C,SACG8C,EAAQhD,OAEX,wBACE,UAAQ,gBACRjC,KAAK,SACLL,UAAU,kBACV,aAAW,SACXM,QAAS,kBAAM4E,EAAoBI,EAAQnF,KAL7C,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGsF,EAAQnE,SApBNmE,EAAQnF,UAXjB,mBAAGH,UAAU,aAAa,UAAQ,oBAAlC,8BCTOwF,EAA+B,SAAC,GAStC,IARLtF,EAQI,EARJA,KACAoF,EAOI,EAPJA,QACAG,EAMI,EANJA,UACArD,EAKI,EALJA,aACAD,EAII,EAJJA,YACAuD,EAGI,EAHJA,QACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,mBAMMC,EAA0B,CAC9BrG,EAAUmE,IACVnE,EAAU6F,OACV7F,EAAUsG,UAGZ,OACE,qBAAK9F,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,2BACOE,QADP,IACOA,OADP,EACOA,EAAMC,GADb,oBACoBD,QADpB,IACoBA,OADpB,EACoBA,EAAME,SAG1B,mBAAG,UAAQ,WAAX,gBACGF,QADH,IACGA,OADH,EACGA,EAAMiB,UAIX,sBAAKnB,UAAU,QAAf,UACG0F,GACC,cAAC,EAAD,IAEAD,GAAaI,EAAWE,SAASN,IACjC,qBAAKzF,UAAU,yBAAyB,UAAQ,gBAAhD,SACGyF,IAIHA,IAAcjG,EAAUsG,UACxB,cAAC,EAAD,CACEd,SAAUM,EACVlD,aAAcA,EACd6C,WAAY9C,KAIdwD,GACA,wBACE,UAAQ,qBACRtF,KAAK,SACLL,UAAU,iBACVM,QA9CkB,WAC5BsF,GAAmB,IAyCX,gCAWHD,GACC,cAAC,EAAD,CACEzF,KAAMA,EACNiC,YAAaA,EACbC,aAAcA,UC1Eb4D,EAAgC,SAAC,GAMvC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,uBAEA,EAAkChE,oBAAS,GAA3C,mBAAOiE,EAAP,KAAkBC,EAAlB,KACMC,EAAYC,iBAAO,MASnBC,EAAc,SAAC7C,GACfA,EAAG8C,SAAWH,EAAUI,SAAWN,GACrCC,GAAa,IAYjB,OARAM,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,QAASL,GAE5B,WACLI,SAASE,oBAAoB,QAASN,MAEvC,CAACJ,IAGF,sBACE,UAAQ,eACRtG,UAAU,qBACViH,IAAKT,EAHP,UAKE,qBAAKxG,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QAAS,kBAAMiG,GAAa,IAL9B,UAOE,+BACGL,EACGA,EAAO5D,KACP,kBAGN,sBAAMtC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDsG,GACC,qBAAKtG,UAAU,gBAAgBG,GAAG,gBAAgB+G,KAAK,OAAvD,SACE,qBAAKlH,UAAU,mBAAf,SACGiG,EAAMhG,KAAI,SAAAkH,GAAI,OACb,mBACE5B,KAAI,gBAAW4B,EAAKhH,IACpBH,UAAWsE,IACT,gBACA,CAAE,YAAa6C,EAAKhH,MAAL,OAAY+F,QAAZ,IAAYA,OAAZ,EAAYA,EAAQ/F,MAGrCG,QAAS,kBA1DE,SAAC6G,GACxBhB,EAASgB,GACTZ,GAAa,GACbH,EAAae,EAAKhH,IAClBkG,GAAuB,GAsDIe,CAAiBD,IAPlC,SASGA,EAAK7E,MAHD6E,EAAKhH,eC/DbkH,EAAgB,WAC3B,MAA0BhF,mBAAiB,IAA3C,mBAAO4D,EAAP,KAAcqB,EAAd,KACA,EAAoCjF,mBAA2B,MAA/D,mBAAOkF,EAAP,KAAoBnF,EAApB,KACA,EAA0BC,mBAAiB,IAA3C,mBAAO3C,EAAP,KAAc8H,EAAd,KACA,EAAkDnF,oBAAS,GAA3D,mBAAOoF,EAAP,KAA0BC,EAA1B,KACA,EAA8CrF,oBAAS,GAAvD,mBAAOsF,EAAP,KAAwBC,EAAxB,KACA,EAA4CvF,oBAAS,GAArD,mBAAOwF,EAAP,KAAuBC,EAAvB,KACA,EAAsDzF,oBAAS,GAA/D,mBAAO0F,EAAP,KAA4B1B,EAA5B,KACA,EAAgChE,mBAAoB,IAApD,mBAAO2C,EAAP,KAAiB7C,EAAjB,KACA,EAAwCE,mBAAsB,MAA9D,mBAAO2F,EAAP,KAAqBC,EAArB,KACA,EAAsD5F,oBAAS,GAA/D,mBAAO6F,EAAP,KAA6BC,EAA7B,KACA,GAAwC9F,mBAAsB,MAA9D,qBAAO+F,GAAP,MAAqBC,GAArB,MAEMC,GAAgB,CAAC9I,EAAU+I,MAAO/I,EAAUgJ,OAE5CC,GAAQ,uCAAG,4BAAAjF,EAAA,+EAEY3B,IAFZ,OAEP6G,EAFO,OAIbpB,EAASoB,GAJI,gDAMbtG,EAAa5C,EAAU+I,OANV,yDAAH,qDAUd1B,qBAAU,WACR4B,OACC,IAEH,IAAME,GAAsB,uCAAG,WAAO7G,GAAP,eAAA0B,EAAA,6DAC7BoE,GAAmB,GACnBF,GAAqB,GAFQ,kBAKH7F,EAA8BC,GAL3B,OAKrB8G,EALqB,OAO3BpB,EAASoB,GACTlB,GAAqB,GARM,kDAU3BtF,EAAa5C,EAAUgJ,OACvBd,GAAqB,GAXM,yBAa3BE,GAAmB,GAbQ,6EAAH,sDAiBtBiB,GAA0B,uCAAG,WAAO9G,GAAP,eAAAyB,EAAA,6DACjCsE,GAAkB,GAClBzB,GAAuB,GAFU,kBAKHxE,EAA4BE,GALzB,OAKzB+G,EALyB,OAO/B3G,EAAY2G,GACZpB,GAAqB,GARU,kDAU/BtF,EAAa5C,EAAUsG,UAVQ,yBAY/BgC,GAAkB,GAZa,6EAAH,sDAsBhC,OACE,sBAAM9H,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEiG,MAAOA,EACPC,OAAQkC,GACRjC,SAAUkC,GACVjC,aAAcuC,GACdtC,uBAAwBA,MAI5B,sBAAKrG,UAAU,QAAQ,UAAQ,cAA/B,WACIoI,IACA,mBAAG,UAAQ,iBAAX,8BAKDT,GACC,cAAC,EAAD,IAGAJ,GAAee,GAAcvC,SAASwB,IACtC,qBACEvH,UAAU,yBACV,UAAQ,oBAFV,SAIGuH,IAQJE,GACC,cAAC,EAAD,CACE/H,MAAOA,EACPC,WAAYqI,EACZpI,cAlDU,SAACM,GAC3B+H,EAAgB/H,GAChB2I,GAA2B3I,EAAKC,IAChCgI,GAAsB,IAgDNtI,iBAAkBwG,EAClBvG,mBAAoBiI,aAQ5BA,GACA,qBACE,UAAQ,UACR/H,UAAWsE,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiB0D,IAPvB,SAUE,qBAAKhI,UAAU,gCAAf,SACE,cAAC,EAAD,CACEE,KAAM8H,EACN1C,QAASN,EACTS,UAAW8B,EACXnF,aAAcA,EACdD,YAAaA,EACbuD,QAASmC,EACTlC,kBAAmBuC,EACnBtC,mBAAoBuC,gBC1JtCY,IAASC,OACP,cAAC,EAAD,IACAlC,SAASmC,eAAe,W","file":"static/js/main.8b47e39a.chunk.js","sourcesContent":["export enum ErrorType {\n  ADD = 'Something went wrong on comment add!',\n  POSTS = 'Something went wrong on posts load!',\n  USERS = 'Something went wrong on users load!',\n  DELETE = 'Something went wrong on comment delete!',\n  COMMENTS = 'Something went wrong on comments load!',\n}\n","import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectPost: Post | null,\n  openerDetails: (post: Post) => void,\n  closeCommentList: React.Dispatch<React.SetStateAction<boolean>>,\n  isCommentListHiden: boolean,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  openerDetails,\n  closeCommentList,\n  isCommentListHiden,\n}) => {\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {isCommentListHiden && (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => openerDetails(post)}\n                  >\n                    Open\n                  </button>\n                )}\n\n                {!isCommentListHiden && (\n                  post.id === selectPost?.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button is-link is-ligth\"\n                        onClick={() => closeCommentList(true)}\n                      >\n                        Close\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className=\"button\"\n                        onClick={() => openerDetails(post)}\n                      >\n                        Open\n                      </button>\n                    )\n                )}\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype NewComment = {\n  postId: number | undefined,\n  name: string,\n  email: string,\n  body: string,\n};\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const customFetch = {\n  getUserFromServer: () => client.get('/users'),\n  getPostFromServer: (userId: number) => client.get<Post[]>(`/posts?userId=${userId}`),\n  getPostComments: (postId: number) => client.get<Comment[]>(`/comments?postId=${postId}`),\n  addComment: (newComment: NewComment) => (\n    client.post<Comment>('/comments', newComment)),\n  removeComment: (idComment: number) => client.delete(`/comments/${idComment}`),\n};\n","export enum ErrorForm {\n  NAME = 'Name is required',\n  EMAIL = 'Email is required',\n  COMMENT = 'Enter some text',\n  NOTVALID = 'Enter correct e-mail',\n}\n","import React, { FormEvent, useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { ErrorType } from '../types/ErrorType';\nimport { customFetch } from '../utils/fetchClient';\nimport { EMAIL_REGEXP } from '../helper/helper';\nimport { ErrorForm } from '../types/ErrorTypesForm';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorType | null>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setComments,\n  setErrorType,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [hasName, setHasName] = useState(true);\n  const [hasEmail, setHasEmail] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [hasComment, setHasComment] = useState(true);\n  const [isCommentAdd, setIsCommentAdd] = useState(false);\n\n  const addNewComment = useCallback(async () => {\n    setIsCommentAdd(true);\n\n    try {\n      const newComment = {\n        postId: post?.id,\n        name,\n        email,\n        body: message,\n      };\n\n      const fetchComment = await customFetch.addComment(newComment);\n\n      setMessage('');\n      setComments(prevComments => [...prevComments, fetchComment]);\n    } catch (error) {\n      setErrorType(ErrorType.ADD);\n    } finally {\n      setIsCommentAdd(false);\n      setHasName(true);\n      setHasEmail(true);\n      setHasComment(true);\n    }\n  }, [name, email, message]);\n\n  const handleFormSubmit = (ev: FormEvent) => {\n    ev.preventDefault();\n\n    let isNotValid;\n\n    if (!name) {\n      setHasName(false);\n      isNotValid = true;\n    }\n\n    if (!email) {\n      setHasEmail(false);\n      isNotValid = true;\n    }\n\n    if (!EMAIL_REGEXP(email)) {\n      setIsEmailValid(false);\n      isNotValid = true;\n    }\n\n    if (!message) {\n      setHasComment(false);\n      isNotValid = true;\n    }\n\n    if (isNotValid) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setMessage('');\n    setHasName(true);\n    setHasEmail(true);\n    setHasComment(true);\n    setIsEmailValid(true);\n  };\n\n  const handleNameChange = (event: FormEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n    setHasName(true);\n  };\n\n  const handleEmailChange = (event: FormEvent<HTMLInputElement>) => {\n    setEmail(event.currentTarget.value);\n    setHasEmail(true);\n    setIsEmailValid(true);\n  };\n\n  const handleCommentChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    setMessage(event.currentTarget.value);\n    setHasComment(true);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !hasName,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!hasName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n\n          )}\n        </div>\n        {!hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorForm.NAME}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !hasEmail,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(!hasEmail || !isEmailValid) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {(!hasEmail || !isEmailValid) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!hasEmail ? ErrorForm.EMAIL : ErrorForm.NOTVALID}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !hasComment,\n            })}\n            value={message}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {!hasComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {ErrorForm.COMMENT}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isCommentAdd,\n            })}\n            onClick={handleFormSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","export const EMAIL_REGEXP = (userEmail: string) => {\n  return String(userEmail)\n    .toLowerCase()\n    .match(\n      // eslint-disable-next-line\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n","import React from 'react';\nimport { ErrorType } from '../types/ErrorType';\nimport { customFetch } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorType | null>>;\n  setComment: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  setComment,\n  setErrorType,\n}) => {\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      setComment(prevComments => prevComments\n        .filter(({ id }) => id !== commentId));\n      await customFetch.removeComment(commentId);\n    } catch (error) {\n      setErrorType(ErrorType.DELETE);\n    }\n  };\n\n  if (!comments.length) {\n    return (\n      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n        No comments yet\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments.map(comment => (\n        <article\n          key={comment.id}\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => handleDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../types/ErrorType';\nimport { CommentsList } from './CommentList';\n\ntype Props = {\n  post: Post | null,\n  comment: Comment[],\n  errorType: ErrorType | null,\n  setErrorType: React.Dispatch<React.SetStateAction<ErrorType | null>>,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isFetch: boolean,\n  isCommentFormOpen: boolean,\n  openFormForComment: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comment,\n  errorType,\n  setErrorType,\n  setComments,\n  isFetch,\n  isCommentFormOpen,\n  openFormForComment,\n}) => {\n  const handleOpenCommentForm = () => {\n    openFormForComment(true);\n  };\n\n  const errorTypes: ErrorType[] = [\n    ErrorType.ADD,\n    ErrorType.DELETE,\n    ErrorType.COMMENTS,\n  ];\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isFetch && (\n            <Loader />\n          )}\n          {(errorType && errorTypes.includes(errorType)) && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorType}\n            </div>\n          )}\n\n          {(errorType !== ErrorType.COMMENTS) && (\n            <CommentsList\n              comments={comment}\n              setErrorType={setErrorType}\n              setComment={setComments}\n            />\n          )}\n\n          {!isCommentFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenCommentForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            post={post}\n            setComments={setComments}\n            setErrorType={setErrorType}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  select: User | null;\n  onSelect: React.Dispatch<React.SetStateAction<User | null>>\n  getUserPosts: (userId: number) => void;\n  setIsCommentListHidden: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  select,\n  onSelect,\n  getUserPosts,\n  setIsCommentListHidden,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const selectRef = useRef(null);\n\n  const handleSelectUser = (user: User) => {\n    onSelect(user);\n    setIsVisible(false);\n    getUserPosts(user.id);\n    setIsCommentListHidden(true);\n  };\n\n  const handleClick = (ev: MouseEvent) => {\n    if (ev.target !== selectRef.current && isVisible) {\n      setIsVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, [isVisible]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={selectRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisible(true)}\n        >\n          <span>\n            {select\n              ? select.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': user.id === select?.id },\n                )}\n                key={user.id}\n                onClick={() => handleSelectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { customFetch } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { ErrorType } from './types/ErrorType';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isErrorType, setErrorType] = useState<ErrorType | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostListVisible, setIsPostListVisible] = useState(false);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isCommentFetch, setIsCommentFetch] = useState(false);\n  const [isCommentListHidden, setIsCommentListHidden] = useState(true);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isOpenFormForComment, setOpenFormForComment] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const loadingErrors = [ErrorType.USERS, ErrorType.POSTS];\n\n  const getUsers = async () => {\n    try {\n      const fetchUsers = await customFetch.getUserFromServer();\n\n      setUsers(fetchUsers as User[]);\n    } catch (eroor) {\n      setErrorType(ErrorType.USERS);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const getUserPostsFromServer = async (userId: number) => {\n    setIsLoaderVisible(true);\n    setIsPostListVisible(false);\n\n    try {\n      const fetchPost = await customFetch.getPostFromServer(userId);\n\n      setPosts(fetchPost);\n      setIsPostListVisible(true);\n    } catch (eroor) {\n      setErrorType(ErrorType.POSTS);\n      setIsPostListVisible(false);\n    } finally {\n      setIsLoaderVisible(false);\n    }\n  };\n\n  const getCommentByPostFromServer = async (postId: number) => {\n    setIsCommentFetch(true);\n    setIsCommentListHidden(false);\n\n    try {\n      const fetchComments = await customFetch.getPostComments(postId);\n\n      setComments(fetchComments);\n      setIsPostListVisible(true);\n    } catch (error) {\n      setErrorType(ErrorType.COMMENTS);\n    } finally {\n      setIsCommentFetch(false);\n    }\n  };\n\n  const handleOpenerDetails = (post: Post) => {\n    setSelectedPost(post);\n    getCommentByPostFromServer(post.id);\n    setOpenFormForComment(false);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  select={selectedUser}\n                  onSelect={setSelectedUser}\n                  getUserPosts={getUserPostsFromServer}\n                  setIsCommentListHidden={setIsCommentListHidden}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoaderVisible && (\n                  <Loader />\n                )}\n\n                {(isErrorType && loadingErrors.includes(isErrorType)) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {isErrorType}\n                  </div>\n                )}\n\n                {/* <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                  No posts yet\n                </div>  */}\n\n                {isPostListVisible && (\n                  <PostsList\n                    posts={posts}\n                    selectPost={selectedPost}\n                    openerDetails={handleOpenerDetails}\n                    closeCommentList={setIsCommentListHidden}\n                    isCommentListHiden={isCommentListHidden}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          {!isCommentListHidden && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comment={comments}\n                  errorType={isErrorType}\n                  setErrorType={setErrorType}\n                  setComments={setComments}\n                  isFetch={isCommentFetch}\n                  isCommentFormOpen={isOpenFormForComment}\n                  openFormForComment={setOpenFormForComment}\n                />\n              </div>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}